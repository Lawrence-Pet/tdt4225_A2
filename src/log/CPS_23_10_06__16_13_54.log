2023-10-06 16:13:57,401 SQL PART2 DEBUG Executing: SELECT COUNT(*) as n_user FROM User
2023-10-06 16:13:57,461 SQL PART2 DEBUG Executing: SELECT COUNT(*) as n_activity FROM Activity
2023-10-06 16:13:57,540 SQL PART2 DEBUG Executing: SELECT COUNT(*) as n_trackpoints FROM TrackPoint
2023-10-06 16:14:01,160 SQL PART2 DEBUG Executing: 
        WITH 
            query AS (
                        SELECT COUNT(trackpoint_id) AS trackpoint_count, activity_id FROM TrackPoint
                        GROUP BY activity_id
                    ),
            activities AS (
                SELECT user_id, activity_id FROM Activity
                ),
            joined_user AS (SELECT activities.user_id, query.trackpoint_count FROM query JOIN activities ON query.activity_id = activities.activity_id)

            SELECT user_id, AVG(trackpoint_count) FROM joined_user
            GROUP BY user_id
        ;
        
2023-10-06 16:14:05,801 SQL PART2 DEBUG Executing: 
        WITH 
            query AS (
                        SELECT COUNT(trackpoint_id) AS trackpoint_count, activity_id FROM TrackPoint
                        GROUP BY activity_id
                    ),
            activities AS (
                SELECT user_id, activity_id FROM Activity
                ),
            joined_user AS (SELECT activities.user_id, query.trackpoint_count FROM query JOIN activities ON query.activity_id = activities.activity_id)

            SELECT user_id, MIN(trackpoint_count) FROM joined_user
            GROUP BY user_id
        ;
        
2023-10-06 16:14:09,490 SQL PART2 DEBUG Executing: 
        WITH 
            query AS (
                        SELECT COUNT(trackpoint_id) AS trackpoint_count, activity_id FROM TrackPoint
                        GROUP BY activity_id
                    ),
            activities AS (
                SELECT user_id, activity_id FROM Activity
                ),
            joined_user AS (SELECT activities.user_id, query.trackpoint_count FROM query JOIN activities ON query.activity_id = activities.activity_id)

            SELECT user_id, MAX(trackpoint_count) FROM joined_user
            GROUP BY user_id
        ;
        
2023-10-06 16:14:55,453 SQL PART2 DEBUG Executing: 
SELECT user_id, COUNT(activity_id) AS result FROM Activity
GROUP BY user_id
ORDER BY result DESC
LIMIT 15
;

2023-10-06 16:15:10,593 SQL PART2 DEBUG Executing: SELECT DISTINCT user_id FROM Activity WHERE transportation_mode='bus'
2023-10-06 16:15:21,258 SQL PART2 DEBUG Executing: 
SELECT user_id, COUNT(DISTINCT transportation_mode) AS mode_count
FROM Activity
GROUP BY user_id
ORDER BY mode_count DESC
LIMIT 10

2023-10-06 16:15:39,253 SQL PART2 DEBUG Executing: 
SELECT activity_id
FROM Activity
GROUP BY activity_id
HAVING COUNT(activity_id) > 1

2023-10-06 16:15:48,143 SQL PART2 DEBUG Executing: 
WITH result AS (
    SELECT user_id
    FROM Activity
    WHERE DATE(start_date_time) != DATE(end_date_time)
)
SELECT DISTINCT user_id FROM result
;

2023-10-06 16:18:35,377 SQL PART2 DEBUG Executing: /*
## Question 7b: List the transportation mode, user id, and duration for these activities
*/

WITH difference_seconds AS (
    SELECT user_id, transportation_mode, TIMESTAMPDIFF(SECOND, start_date_time, end_date_time) AS seconds
    FROM Activity
    WHERE DATE(start_date_time) != DATE(end_date_time)
),

diff_clock AS (
    SELECT 
        user_id, 
        transportation_mode,
        seconds, 
        MOD(seconds, 60) AS seconds_p,
        MOD(seconds, 60*60) AS minutes_p,
        MOD(seconds, 60*60*24) AS hours_p
    FROM
        difference_seconds
) 

SELECT
    user_id,
    transportation_mode,
    CONCAT(
        FLOOR(seconds / 3600 / 24), ' days ',
        FLOOR(hours_p / 3600), ' hours ',
        FLOOR(minutes_p / 60), ' minutes ',
        seconds_p, ' seconds '
    ) AS duration
FROM diff_clock;
2023-10-06 16:20:33,296 SQL PART2 DEBUG Executing: /*
# Question 9: Find the top 15 users who have gained the most altitude meters
*/

/*This removes all trackpoints with -777*/
WITH trackpoint_a_cleaner AS( 

    SELECT TrackPoint.*, t2.user_id
    FROM TrackPoint
    JOIN Activity as t2
    ON TrackPoint.activity_id = t2.activity_id
    WHERE altitude != -777
)

SELECT 
    A.user_id,  
    SUM((B.altitude) - (A.altitude) * 0.3048) as altitude_gain
FROM  trackpoint_a_cleaner AS A
JOIN trackpoint_a_cleaner AS B 
    ON(A.trackpoint_id = B.trackpoint_id-1)
WHERE A.activity_id = B.activity_id 
    AND (B.altitude - A.altitude) > 0
GROUP BY user_id
ORDER BY altitude_gain DESC
LIMIT 15;
2023-10-06 16:30:40,764 SQL PART2 DEBUG Executing: /*
* Question 10: Find the users that have traveled the longest total distance in one day for each transportation mode.
* INCLUDES ACTIVITES THAT CROSSES MULTIPLE DATES BUT ONLY TAKES INTO ACCOUNT TRACKPOINTS IN THE SAME DAY. 
* HOWEVER RETURNS MULTIPLE USERS SINCE THEY HAVE SAME MAX
*/
WITH transport_same_day AS (
    SELECT 
        user_id, 
        activity_id, 
        transportation_mode 
    FROM 
        Activity 
    WHERE 
        transportation_mode != 'NULL' 
), 

joined AS (
    SELECT 
        lon, 
        lat,
        date_time, 
        trackpoint_id,
        transport_same_day.user_id,
        transport_same_day.transportation_mode 
    FROM 
        TrackPoint 
    JOIN 
        transport_same_day 
    ON 
        TrackPoint.activity_id = transport_same_day.activity_id

),

distances_per_day AS (
    SELECT 
        SUM(SQRT(POW(A.lon-B.lon, 2)+POW(A.lat-B.lat, 2))*111139) as distance_in_meters, 
        A.user_id as user_id, 
        A.transportation_mode AS transportation_mode,
        DATE(A.date_time) AS date_date
    FROM joined A
    JOIN joined B ON (A.trackpoint_id = B.trackpoint_id -1)
    WHERE DATE(A.date_time) = DATE(B.date_time)
    GROUP BY date_date, user_id, transportation_mode

),

sumarized_by_day_tm AS(
SELECT 
    user_id, 
    SUM(distance_in_meters) AS total_daily_distance, 
    transportation_mode,
    date_date 
FROM distances_per_day
GROUP BY user_id, date_date, transportation_mode
)
SELECT A.user_id, A.transportation_mode, A.total_daily_distance, A.date_date
FROM (
    SELECT 
        MAX(total_daily_distance) as max_daily,
        transportation_mode 
    FROM 
        sumarized_by_day_tm 
    GROUP BY
        transportation_mode
        ) AS B
JOIN sumarized_by_day_tm AS A
    ON B.transportation_mode = A.transportation_mode
WHERE A.transportation_mode = B.transportation_mode AND A.total_daily_distance = B.max_daily
;


2023-10-06 16:33:27,562 SQL PART2 DEBUG Executing: /*
* 11. Find all users who have invalid activities, and the number of invalid activities per user
*/

WITH invalid_act AS(
    SELECT *
    FROM(

        SELECT 
            A.activity_id,
            A.trackpoint_id as track_id_A,
            B.trackpoint_id as track_id_B,
            TIMESTAMPDIFF(SECOND, A.date_time, B.date_time) as sec_dif
        FROM TrackPoint A
        JOIN TrackPoint B
        ON (A.trackpoint_id = B.trackpoint_id -1)
        WHERE A.activity_id = B.activity_id
    ) as dif_table
    WHERE sec_dif > 300 /* 5 minutes */
),

dist_acts AS (
SELECT DISTINCT activity_id
FROM invalid_act
)

SELECT 
    Activity.user_id, 
    COUNT(dist_acts.activity_id) as N_invalid_activities
FROM dist_acts
JOIN Activity
ON Activity.activity_id = dist_acts.activity_id
GROUP BY user_id
;
2023-10-06 16:36:52,794 SQL PART2 DEBUG Executing: /*
* Question 12: Find all users who have registered transportation_mode and their most used transportation_mode. 
**  The answer should be on format (user_id, most_used_transportation_mode) sorted on user_id.
**  Some users may have the same number of activities tagged with e.g. walk and car. In this case it is up to you to decide which transportation mode to include in your answer (choose one).
**  Do not count the rows where the mode is null.
*/

WITH transport_modes AS (
    SELECT 
        user_id, 
        activity_id, 
        transportation_mode 
    FROM 
        Activity 
    WHERE 
        transportation_mode != 'NULL' 
), 

counted_tm AS (
    SELECT 
        user_id, 
        COUNT(*) AS n_used, 
        transportation_mode
    FROM 
        transport_modes
    GROUP BY 
        transportation_mode, user_id
),

max_for_each_user AS (
    SELECT 
        A.user_id, 
        A.n_used AS max_count,
        A.transportation_mode
    FROM 
        counted_tm AS A
    JOIN (
        SELECT 
            user_id, 
            MAX(n_used) AS max_n_used
        FROM 
            counted_tm
        GROUP BY 
            user_id
    ) AS B
    ON 
        A.user_id = B.user_id 
        AND A.n_used = B.max_n_used
)

SELECT max_for_each_user.*
FROM max_for_each_user
WHERE max_for_each_user.transportation_mode = (
    SELECT t2.transportation_mode
    FROM max_for_each_user as t2
    WHERE t2.user_id = max_for_each_user.user_id
    ORDER BY rand()
    LIMIT 1
)
ORDER BY max_for_each_user.user_id
;


